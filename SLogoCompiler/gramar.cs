// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  HR-L-7000203
// DateTime: 3.11.2014. 7:23:14
// UserName: hrivsin
// Input file <logo.yacc - 22.10.2014. 11:46:44>

// options: lines

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SLogoCompiler
{
internal enum Token {error=48,
    EOF=49,TO=50,FUNCTION_NAME=51,END=52,VARNAME=53,QVARNAME=54,
    NUMBER=55,OP_STAR=56,OP_PLUS=57,OP_MINUS=58,OP_DIVIDE=59,OP_OPEN=60,
    OP_CLOSE=61,BLOCK_OPEN=62,BLOCK_CLOSE=63,MAKE=64,PU=65,PD=66,
    REPEAT=67,FD=68,BK=69,RT=70,LT=71,CS=72,
    PE=73,HOME=74,SETPC=75,SETSC=76,SPS=77,HT=78,
    ST=79,LABEL=80,SETLABELHEIGHT=81,LE=82,GT=83,GE=84,
    EQ=85,AND=86,OR=87,NOT=88,IF=89,ELSE=90,
    WHILE=91,STOP=92,UMINUS=93};

internal class Parser: ShiftReduceParser<String, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[64];
  private static State[] states = new State[109];
  private static string[] nonTerms = new string[] {
      "logo_program", "$accept", "logo_function", "Anon@1", "logo_fcommands", 
      "fparam", "Anon@2", "Anon@3", "Anon@4", "logo_command", "logo_bcommand", 
      "expr", "block_expr", "Anon@5", "log_expr", "mexpr", };

  static Parser() {
    states[0] = new State(new int[]{50,4},new int[]{-1,1,-3,108});
    states[1] = new State(new int[]{49,2,50,4},new int[]{-3,3});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{51,5});
    states[5] = new State(new int[]{53,107,64,-4,51,-4,80,-4,81,-4,65,-4,66,-4,68,-4,69,-4,70,-4,71,-4,72,-4,73,-4,74,-4,75,-4,76,-4,77,-4,92,-4,78,-4,79,-4,67,-4,89,-4,91,-4,52,-10},new int[]{-4,6,-6,98,-9,105});
    states[6] = new State(new int[]{64,10,51,28,80,36,81,38,65,40,66,41,68,42,69,44,70,46,71,48,72,50,73,51,74,52,75,53,76,55,77,57,92,59,78,60,79,61,67,62,89,69,91,75},new int[]{-5,7,-10,97});
    states[7] = new State(new int[]{52,8,64,10,51,28,80,36,81,38,65,40,66,41,68,42,69,44,70,46,71,48,72,50,73,51,74,52,75,53,76,55,77,57,92,59,78,60,79,61,67,62,89,69,91,75},new int[]{-10,9});
    states[8] = new State(-5);
    states[9] = new State(-14);
    states[10] = new State(new int[]{54,11});
    states[11] = new State(new int[]{60,21,58,24,53,26,55,27,52,-18,64,-18,51,-18,80,-18,81,-18,65,-18,66,-18,68,-18,69,-18,70,-18,71,-18,72,-18,73,-18,74,-18,75,-18,76,-18,77,-18,92,-18,78,-18,79,-18,67,-18,89,-18,91,-18,63,-18,90,-18},new int[]{-12,12});
    states[12] = new State(new int[]{56,13,59,15,57,17,58,19,52,-19,64,-19,51,-19,80,-19,81,-19,65,-19,66,-19,68,-19,69,-19,70,-19,71,-19,72,-19,73,-19,74,-19,75,-19,76,-19,77,-19,92,-19,78,-19,79,-19,67,-19,89,-19,91,-19,63,-19,90,-19});
    states[13] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,14});
    states[14] = new State(new int[]{56,13,59,15,57,17,58,19,52,-45,64,-45,51,-45,80,-45,81,-45,65,-45,66,-45,68,-45,69,-45,70,-45,71,-45,72,-45,73,-45,74,-45,75,-45,76,-45,77,-45,92,-45,78,-45,79,-45,67,-45,89,-45,91,-45,63,-45,90,-45,61,-45,60,-45,53,-45,55,-45,62,-45,83,-45,84,-45,82,-45,86,-45,87,-45});
    states[15] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,16});
    states[16] = new State(new int[]{56,13,59,15,57,17,58,19,52,-46,64,-46,51,-46,80,-46,81,-46,65,-46,66,-46,68,-46,69,-46,70,-46,71,-46,72,-46,73,-46,74,-46,75,-46,76,-46,77,-46,92,-46,78,-46,79,-46,67,-46,89,-46,91,-46,63,-46,90,-46,61,-46,60,-46,53,-46,55,-46,62,-46,83,-46,84,-46,82,-46,86,-46,87,-46});
    states[17] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,18});
    states[18] = new State(new int[]{56,13,59,15,57,17,58,19,52,-47,64,-47,51,-47,80,-47,81,-47,65,-47,66,-47,68,-47,69,-47,70,-47,71,-47,72,-47,73,-47,74,-47,75,-47,76,-47,77,-47,92,-47,78,-47,79,-47,67,-47,89,-47,91,-47,63,-47,90,-47,61,-47,60,-47,53,-47,55,-47,62,-47,83,-47,84,-47,82,-47,86,-47,87,-47});
    states[19] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,20});
    states[20] = new State(new int[]{56,13,59,15,57,17,58,19,52,-48,64,-48,51,-48,80,-48,81,-48,65,-48,66,-48,68,-48,69,-48,70,-48,71,-48,72,-48,73,-48,74,-48,75,-48,76,-48,77,-48,92,-48,78,-48,79,-48,67,-48,89,-48,91,-48,63,-48,90,-48,61,-48,60,-48,53,-48,55,-48,62,-48,83,-48,84,-48,82,-48,86,-48,87,-48});
    states[21] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,22});
    states[22] = new State(new int[]{61,23,56,13,59,15,57,17,58,19});
    states[23] = new State(-44);
    states[24] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,25});
    states[25] = new State(new int[]{56,13,59,15,57,17,58,19,52,-49,64,-49,51,-49,80,-49,81,-49,65,-49,66,-49,68,-49,69,-49,70,-49,71,-49,72,-49,73,-49,74,-49,75,-49,76,-49,77,-49,92,-49,78,-49,79,-49,67,-49,89,-49,91,-49,63,-49,90,-49,61,-49,60,-49,53,-49,55,-49,62,-49,83,-49,84,-49,82,-49,86,-49,87,-49});
    states[26] = new State(-50);
    states[27] = new State(-51);
    states[28] = new State(new int[]{62,30,60,21,58,24,53,26,55,27,52,-20,64,-20,51,-20,80,-20,81,-20,65,-20,66,-20,68,-20,69,-20,70,-20,71,-20,72,-20,73,-20,74,-20,75,-20,76,-20,77,-20,92,-20,78,-20,79,-20,67,-20,89,-20,91,-20,63,-20,90,-20},new int[]{-13,29,-16,35,-12,34});
    states[29] = new State(-21);
    states[30] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-16,31,-12,34});
    states[31] = new State(new int[]{63,32,60,21,58,24,53,26,55,27},new int[]{-12,33});
    states[32] = new State(-54);
    states[33] = new State(new int[]{56,13,59,15,57,17,58,19,60,-52,53,-52,55,-52,52,-52,64,-52,51,-52,80,-52,81,-52,65,-52,66,-52,68,-52,69,-52,70,-52,71,-52,72,-52,73,-52,74,-52,75,-52,76,-52,77,-52,92,-52,78,-52,79,-52,67,-52,89,-52,91,-52,63,-52,90,-52});
    states[34] = new State(new int[]{56,13,59,15,57,17,58,19,60,-53,53,-53,55,-53,52,-53,64,-53,51,-53,80,-53,81,-53,65,-53,66,-53,68,-53,69,-53,70,-53,71,-53,72,-53,73,-53,74,-53,75,-53,76,-53,77,-53,92,-53,78,-53,79,-53,67,-53,89,-53,91,-53,63,-53,90,-53});
    states[35] = new State(new int[]{60,21,58,24,53,26,55,27,52,-55,64,-55,51,-55,80,-55,81,-55,65,-55,66,-55,68,-55,69,-55,70,-55,71,-55,72,-55,73,-55,74,-55,75,-55,76,-55,77,-55,92,-55,78,-55,79,-55,67,-55,89,-55,91,-55,63,-55,90,-55},new int[]{-12,33});
    states[36] = new State(new int[]{54,37});
    states[37] = new State(-22);
    states[38] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,39});
    states[39] = new State(new int[]{56,13,59,15,57,17,58,19,52,-23,64,-23,51,-23,80,-23,81,-23,65,-23,66,-23,68,-23,69,-23,70,-23,71,-23,72,-23,73,-23,74,-23,75,-23,76,-23,77,-23,92,-23,78,-23,79,-23,67,-23,89,-23,91,-23,63,-23,90,-23});
    states[40] = new State(-24);
    states[41] = new State(-25);
    states[42] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,43});
    states[43] = new State(new int[]{56,13,59,15,57,17,58,19,52,-26,64,-26,51,-26,80,-26,81,-26,65,-26,66,-26,68,-26,69,-26,70,-26,71,-26,72,-26,73,-26,74,-26,75,-26,76,-26,77,-26,92,-26,78,-26,79,-26,67,-26,89,-26,91,-26,63,-26,90,-26});
    states[44] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,45});
    states[45] = new State(new int[]{56,13,59,15,57,17,58,19,52,-27,64,-27,51,-27,80,-27,81,-27,65,-27,66,-27,68,-27,69,-27,70,-27,71,-27,72,-27,73,-27,74,-27,75,-27,76,-27,77,-27,92,-27,78,-27,79,-27,67,-27,89,-27,91,-27,63,-27,90,-27});
    states[46] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,47});
    states[47] = new State(new int[]{56,13,59,15,57,17,58,19,52,-28,64,-28,51,-28,80,-28,81,-28,65,-28,66,-28,68,-28,69,-28,70,-28,71,-28,72,-28,73,-28,74,-28,75,-28,76,-28,77,-28,92,-28,78,-28,79,-28,67,-28,89,-28,91,-28,63,-28,90,-28});
    states[48] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,49});
    states[49] = new State(new int[]{56,13,59,15,57,17,58,19,52,-29,64,-29,51,-29,80,-29,81,-29,65,-29,66,-29,68,-29,69,-29,70,-29,71,-29,72,-29,73,-29,74,-29,75,-29,76,-29,77,-29,92,-29,78,-29,79,-29,67,-29,89,-29,91,-29,63,-29,90,-29});
    states[50] = new State(-30);
    states[51] = new State(-31);
    states[52] = new State(-32);
    states[53] = new State(new int[]{62,30,60,21,58,24,53,26,55,27},new int[]{-13,54,-16,35,-12,34});
    states[54] = new State(-33);
    states[55] = new State(new int[]{62,30,60,21,58,24,53,26,55,27},new int[]{-13,56,-16,35,-12,34});
    states[56] = new State(-34);
    states[57] = new State(new int[]{62,30,60,21,58,24,53,26,55,27},new int[]{-13,58,-16,35,-12,34});
    states[58] = new State(-35);
    states[59] = new State(-36);
    states[60] = new State(-37);
    states[61] = new State(-38);
    states[62] = new State(-39,new int[]{-14,63});
    states[63] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,64});
    states[64] = new State(new int[]{56,13,59,15,57,17,58,19,62,66,64,10,51,28,80,36,81,38,65,40,66,41,68,42,69,44,70,46,71,48,72,50,73,51,74,52,75,53,76,55,77,57,92,59,78,60,79,61,67,62,89,69,91,75},new int[]{-11,65,-10,74});
    states[65] = new State(-40);
    states[66] = new State(new int[]{64,10,51,28,80,36,81,38,65,40,66,41,68,42,69,44,70,46,71,48,72,50,73,51,74,52,75,53,76,55,77,57,92,59,78,60,79,61,67,62,89,69,91,75},new int[]{-5,67,-10,97});
    states[67] = new State(new int[]{63,68,64,10,51,28,80,36,81,38,65,40,66,41,68,42,69,44,70,46,71,48,72,50,73,51,74,52,75,53,76,55,77,57,92,59,78,60,79,61,67,62,89,69,91,75},new int[]{-10,9});
    states[68] = new State(-16);
    states[69] = new State(new int[]{60,82,58,24,53,26,55,27,88,94},new int[]{-15,70,-12,96});
    states[70] = new State(new int[]{86,78,87,80,62,66,64,10,51,28,80,36,81,38,65,40,66,41,68,42,69,44,70,46,71,48,72,50,73,51,74,52,75,53,76,55,77,57,92,59,78,60,79,61,67,62,89,69,91,75},new int[]{-11,71,-10,74});
    states[71] = new State(new int[]{90,72,52,-41,64,-41,51,-41,80,-41,81,-41,65,-41,66,-41,68,-41,69,-41,70,-41,71,-41,72,-41,73,-41,74,-41,75,-41,76,-41,77,-41,92,-41,78,-41,79,-41,67,-41,89,-41,91,-41,63,-41});
    states[72] = new State(new int[]{62,66,64,10,51,28,80,36,81,38,65,40,66,41,68,42,69,44,70,46,71,48,72,50,73,51,74,52,75,53,76,55,77,57,92,59,78,60,79,61,67,62,89,69,91,75},new int[]{-11,73,-10,74});
    states[73] = new State(-42);
    states[74] = new State(-17);
    states[75] = new State(new int[]{60,82,58,24,53,26,55,27,88,94},new int[]{-15,76,-12,96});
    states[76] = new State(new int[]{86,78,87,80,62,66,64,10,51,28,80,36,81,38,65,40,66,41,68,42,69,44,70,46,71,48,72,50,73,51,74,52,75,53,76,55,77,57,92,59,78,60,79,61,67,62,89,69,91,75},new int[]{-11,77,-10,74});
    states[77] = new State(-43);
    states[78] = new State(new int[]{60,82,58,24,53,26,55,27,88,94},new int[]{-15,79,-12,96});
    states[79] = new State(new int[]{86,78,87,80,62,-61,64,-61,51,-61,80,-61,81,-61,65,-61,66,-61,68,-61,69,-61,70,-61,71,-61,72,-61,73,-61,74,-61,75,-61,76,-61,77,-61,92,-61,78,-61,79,-61,67,-61,89,-61,91,-61,61,-61});
    states[80] = new State(new int[]{60,82,58,24,53,26,55,27,88,94},new int[]{-15,81,-12,96});
    states[81] = new State(new int[]{86,78,87,80,62,-62,64,-62,51,-62,80,-62,81,-62,65,-62,66,-62,68,-62,69,-62,70,-62,71,-62,72,-62,73,-62,74,-62,75,-62,76,-62,77,-62,92,-62,78,-62,79,-62,67,-62,89,-62,91,-62,61,-62});
    states[82] = new State(new int[]{60,82,58,24,53,26,55,27,88,94},new int[]{-15,83,-12,85});
    states[83] = new State(new int[]{61,84,86,78,87,80});
    states[84] = new State(-56);
    states[85] = new State(new int[]{61,23,83,86,56,13,59,15,57,17,58,19,84,88,71,90,82,92});
    states[86] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,87});
    states[87] = new State(new int[]{56,13,59,15,57,17,58,19,86,-57,87,-57,62,-57,64,-57,51,-57,80,-57,81,-57,65,-57,66,-57,68,-57,69,-57,70,-57,71,-57,72,-57,73,-57,74,-57,75,-57,76,-57,77,-57,92,-57,78,-57,79,-57,67,-57,89,-57,91,-57,61,-57});
    states[88] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,89});
    states[89] = new State(new int[]{56,13,59,15,57,17,58,19,86,-58,87,-58,62,-58,64,-58,51,-58,80,-58,81,-58,65,-58,66,-58,68,-58,69,-58,70,-58,71,-58,72,-58,73,-58,74,-58,75,-58,76,-58,77,-58,92,-58,78,-58,79,-58,67,-58,89,-58,91,-58,61,-58});
    states[90] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,91});
    states[91] = new State(new int[]{56,13,59,15,57,17,58,19,86,-59,87,-59,62,-59,64,-59,51,-59,80,-59,81,-59,65,-59,66,-59,68,-59,69,-59,70,-59,71,-59,72,-59,73,-59,74,-59,75,-59,76,-59,77,-59,92,-59,78,-59,79,-59,67,-59,89,-59,91,-59,61,-59});
    states[92] = new State(new int[]{60,21,58,24,53,26,55,27},new int[]{-12,93});
    states[93] = new State(new int[]{56,13,59,15,57,17,58,19,86,-60,87,-60,62,-60,64,-60,51,-60,80,-60,81,-60,65,-60,66,-60,68,-60,69,-60,70,-60,71,-60,72,-60,73,-60,74,-60,75,-60,76,-60,77,-60,92,-60,78,-60,79,-60,67,-60,89,-60,91,-60,61,-60});
    states[94] = new State(new int[]{60,82,58,24,53,26,55,27,88,94},new int[]{-15,95,-12,96});
    states[95] = new State(new int[]{86,78,87,80,62,-63,64,-63,51,-63,80,-63,81,-63,65,-63,66,-63,68,-63,69,-63,70,-63,71,-63,72,-63,73,-63,74,-63,75,-63,76,-63,77,-63,92,-63,78,-63,79,-63,67,-63,89,-63,91,-63,61,-63});
    states[96] = new State(new int[]{83,86,56,13,59,15,57,17,58,19,84,88,71,90,82,92});
    states[97] = new State(-15);
    states[98] = new State(new int[]{53,104,64,-6,51,-6,80,-6,81,-6,65,-6,66,-6,68,-6,69,-6,70,-6,71,-6,72,-6,73,-6,74,-6,75,-6,76,-6,77,-6,92,-6,78,-6,79,-6,67,-6,89,-6,91,-6,52,-8},new int[]{-7,99,-8,102});
    states[99] = new State(new int[]{64,10,51,28,80,36,81,38,65,40,66,41,68,42,69,44,70,46,71,48,72,50,73,51,74,52,75,53,76,55,77,57,92,59,78,60,79,61,67,62,89,69,91,75},new int[]{-5,100,-10,97});
    states[100] = new State(new int[]{52,101,64,10,51,28,80,36,81,38,65,40,66,41,68,42,69,44,70,46,71,48,72,50,73,51,74,52,75,53,76,55,77,57,92,59,78,60,79,61,67,62,89,69,91,75},new int[]{-10,9});
    states[101] = new State(-7);
    states[102] = new State(new int[]{52,103});
    states[103] = new State(-9);
    states[104] = new State(-13);
    states[105] = new State(new int[]{52,106});
    states[106] = new State(-11);
    states[107] = new State(-12);
    states[108] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,49});
    rules[2] = new Rule(-1, new int[]{-1,-3});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-4, new int[]{});
    rules[5] = new Rule(-3, new int[]{50,51,-4,-5,52});
    rules[6] = new Rule(-7, new int[]{});
    rules[7] = new Rule(-3, new int[]{50,51,-6,-7,-5,52});
    rules[8] = new Rule(-8, new int[]{});
    rules[9] = new Rule(-3, new int[]{50,51,-6,-8,52});
    rules[10] = new Rule(-9, new int[]{});
    rules[11] = new Rule(-3, new int[]{50,51,-9,52});
    rules[12] = new Rule(-6, new int[]{53});
    rules[13] = new Rule(-6, new int[]{-6,53});
    rules[14] = new Rule(-5, new int[]{-5,-10});
    rules[15] = new Rule(-5, new int[]{-10});
    rules[16] = new Rule(-11, new int[]{62,-5,63});
    rules[17] = new Rule(-11, new int[]{-10});
    rules[18] = new Rule(-10, new int[]{64,54});
    rules[19] = new Rule(-10, new int[]{64,54,-12});
    rules[20] = new Rule(-10, new int[]{51});
    rules[21] = new Rule(-10, new int[]{51,-13});
    rules[22] = new Rule(-10, new int[]{80,54});
    rules[23] = new Rule(-10, new int[]{81,-12});
    rules[24] = new Rule(-10, new int[]{65});
    rules[25] = new Rule(-10, new int[]{66});
    rules[26] = new Rule(-10, new int[]{68,-12});
    rules[27] = new Rule(-10, new int[]{69,-12});
    rules[28] = new Rule(-10, new int[]{70,-12});
    rules[29] = new Rule(-10, new int[]{71,-12});
    rules[30] = new Rule(-10, new int[]{72});
    rules[31] = new Rule(-10, new int[]{73});
    rules[32] = new Rule(-10, new int[]{74});
    rules[33] = new Rule(-10, new int[]{75,-13});
    rules[34] = new Rule(-10, new int[]{76,-13});
    rules[35] = new Rule(-10, new int[]{77,-13});
    rules[36] = new Rule(-10, new int[]{92});
    rules[37] = new Rule(-10, new int[]{78});
    rules[38] = new Rule(-10, new int[]{79});
    rules[39] = new Rule(-14, new int[]{});
    rules[40] = new Rule(-10, new int[]{67,-14,-12,-11});
    rules[41] = new Rule(-10, new int[]{89,-15,-11});
    rules[42] = new Rule(-10, new int[]{89,-15,-11,90,-11});
    rules[43] = new Rule(-10, new int[]{91,-15,-11});
    rules[44] = new Rule(-12, new int[]{60,-12,61});
    rules[45] = new Rule(-12, new int[]{-12,56,-12});
    rules[46] = new Rule(-12, new int[]{-12,59,-12});
    rules[47] = new Rule(-12, new int[]{-12,57,-12});
    rules[48] = new Rule(-12, new int[]{-12,58,-12});
    rules[49] = new Rule(-12, new int[]{58,-12});
    rules[50] = new Rule(-12, new int[]{53});
    rules[51] = new Rule(-12, new int[]{55});
    rules[52] = new Rule(-16, new int[]{-16,-12});
    rules[53] = new Rule(-16, new int[]{-12});
    rules[54] = new Rule(-13, new int[]{62,-16,63});
    rules[55] = new Rule(-13, new int[]{-16});
    rules[56] = new Rule(-15, new int[]{60,-15,61});
    rules[57] = new Rule(-15, new int[]{-12,83,-12});
    rules[58] = new Rule(-15, new int[]{-12,84,-12});
    rules[59] = new Rule(-15, new int[]{-12,71,-12});
    rules[60] = new Rule(-15, new int[]{-12,82,-12});
    rules[61] = new Rule(-15, new int[]{-15,86,-15});
    rules[62] = new Rule(-15, new int[]{-15,87,-15});
    rules[63] = new Rule(-15, new int[]{88,-15});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // Anon@1 -> /* empty */
#line 45 "logo.yacc"
{  
#line 46 "logo.yacc"
						error_checker.AddFuncDef(ValueStack[ValueStack.Depth-1], "", yyLineCounter()); 
#line 47 "logo.yacc"
						output_code += "public void "+ValueStack[ValueStack.Depth-1]+"()\n";
#line 48 "logo.yacc"
						output_code += "{\n";
#line 49 "logo.yacc"
						output_code += "TurtleRuntime.LogoVariables<double> _lvars = new TurtleRuntime.LogoVariables<double>(_gvars);\n";
#line 50 "logo.yacc"
					}
        break;
      case 5: // logo_function -> TO, FUNCTION_NAME, Anon@1, logo_fcommands, END
#line 52 "logo.yacc"
{ 
#line 53 "logo.yacc"
						output_code +=  ValueStack[ValueStack.Depth-2];
#line 54 "logo.yacc"
						output_code +=  "\n}\n";
#line 55 "logo.yacc"
						
#line 56 "logo.yacc"
						error_checker.CloseFuncDef(ValueStack[ValueStack.Depth-4], yyLineCounter()); 
#line 57 "logo.yacc"
					}
        break;
      case 6: // Anon@2 -> /* empty */
#line 59 "logo.yacc"
{  
#line 60 "logo.yacc"
						error_checker.AddFuncDef(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1], yyLineCounter()); 
#line 61 "logo.yacc"
                        output_code += "public void "+ValueStack[ValueStack.Depth-2]+"("+ValueStack[ValueStack.Depth-1]+")\n";
#line 62 "logo.yacc"
                        output_code += "{\n";
#line 63 "logo.yacc"
						output_code += "TurtleRuntime.LogoVariables<double> _lvars = new TurtleRuntime.LogoVariables<double>(_gvars);\n";
#line 64 "logo.yacc"
						
#line 65 "logo.yacc"
						string[] fps = ValueStack[ValueStack.Depth-1].Replace("double", "").Split(',');
#line 66 "logo.yacc"
						foreach(string fp in fps)
#line 67 "logo.yacc"
						{
#line 68 "logo.yacc"
							output_code +=  "_lvars[\""+fp.Trim()+"\"] = "+fp+";\n";
#line 69 "logo.yacc"
							error_checker.AddLVarDef(fp, yyLineCounter());
#line 70 "logo.yacc"
						}
#line 71 "logo.yacc"
						
#line 72 "logo.yacc"
					}
        break;
      case 7: // logo_function -> TO, FUNCTION_NAME, fparam, Anon@2, logo_fcommands, END
#line 74 "logo.yacc"
{ 
#line 75 "logo.yacc"
                        output_code +=  ValueStack[ValueStack.Depth-2];
#line 76 "logo.yacc"
                        output_code +=  "\n}\n";
#line 77 "logo.yacc"
                        
#line 78 "logo.yacc"
                        error_checker.CloseFuncDef(ValueStack[ValueStack.Depth-5], yyLineCounter()); 
#line 79 "logo.yacc"

#line 80 "logo.yacc"
					}
        break;
      case 8: // Anon@3 -> /* empty */
#line 82 "logo.yacc"
{  
#line 83 "logo.yacc"
						error_checker.AddFuncDef(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1], yyLineCounter()); 
#line 84 "logo.yacc"
					}
        break;
      case 9: // logo_function -> TO, FUNCTION_NAME, fparam, Anon@3, END
#line 86 "logo.yacc"
{ 
#line 87 "logo.yacc"
						output_code += "public void "+ValueStack[ValueStack.Depth-4]+"("+ValueStack[ValueStack.Depth-3]+")\n";
#line 88 "logo.yacc"
						output_code += "{";
#line 89 "logo.yacc"
						output_code +=  "\n}\n";
#line 90 "logo.yacc"
						
#line 91 "logo.yacc"
						error_checker.CloseFuncDef(ValueStack[ValueStack.Depth-4], yyLineCounter()); 
#line 92 "logo.yacc"
					}
        break;
      case 10: // Anon@4 -> /* empty */
#line 94 "logo.yacc"
{  
#line 95 "logo.yacc"
						error_checker.AddFuncDef(ValueStack[ValueStack.Depth-1], "", yyLineCounter()); 
#line 96 "logo.yacc"
					}
        break;
      case 11: // logo_function -> TO, FUNCTION_NAME, Anon@4, END
#line 98 "logo.yacc"
{ 
#line 99 "logo.yacc"
						output_code += "public void "+ValueStack[ValueStack.Depth-3]+"()\n";
#line 100 "logo.yacc"
						output_code += "{";
#line 101 "logo.yacc"
						output_code +=  "\n}\n";
#line 102 "logo.yacc"
						
#line 103 "logo.yacc"
						error_checker.CloseFuncDef(ValueStack[ValueStack.Depth-3], yyLineCounter()); 
#line 104 "logo.yacc"
					}
        break;
      case 12: // fparam -> VARNAME
#line 107 "logo.yacc"
{  CurrentSemanticValue = "double " + ValueStack[ValueStack.Depth-1]; }
        break;
      case 13: // fparam -> fparam, VARNAME
#line 108 "logo.yacc"
{  CurrentSemanticValue = ValueStack[ValueStack.Depth-2] + ", double " + ValueStack[ValueStack.Depth-1]; }
        break;
      case 14: // logo_fcommands -> logo_fcommands, logo_command
#line 111 "logo.yacc"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2] + ValueStack[ValueStack.Depth-1]; }
        break;
      case 15: // logo_fcommands -> logo_command
#line 112 "logo.yacc"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 16: // logo_bcommand -> BLOCK_OPEN, logo_fcommands, BLOCK_CLOSE
#line 116 "logo.yacc"
{ CurrentSemanticValue = "{\n" + ValueStack[ValueStack.Depth-2] + "\n}\n"; }
        break;
      case 17: // logo_bcommand -> logo_command
#line 117 "logo.yacc"
{ CurrentSemanticValue = "{\n" + ValueStack[ValueStack.Depth-1] + "\n}\n"; }
        break;
      case 18: // logo_command -> MAKE, QVARNAME
#line 121 "logo.yacc"
{ 
#line 122 "logo.yacc"
						error_checker.AddLVarDef(ValueStack[ValueStack.Depth-1], yyLineCounter());
#line 123 "logo.yacc"
                        //$$ = "double "+$2+";\n";
                        CurrentSemanticValue = "_lvars[\""+ValueStack[ValueStack.Depth-1]+"\"] = 0;\n";
#line 124 "logo.yacc"
					}
        break;
      case 19: // logo_command -> MAKE, QVARNAME, expr
#line 127 "logo.yacc"
{ 
#line 128 "logo.yacc"
						error_checker.AddLVarDef(ValueStack[ValueStack.Depth-2], yyLineCounter());
#line 129 "logo.yacc"
						//$$ = "double "+$2+" = "+$3+";\n";
                        CurrentSemanticValue = "_lvars[\""+ValueStack[ValueStack.Depth-2]+"\"] = "+ValueStack[ValueStack.Depth-1]+";\n";
#line 130 "logo.yacc"
					}
        break;
      case 20: // logo_command -> FUNCTION_NAME
#line 136 "logo.yacc"
{ 
#line 137 "logo.yacc"
						error_checker.AddFuncCall(ValueStack[ValueStack.Depth-1], "", yyLineCounter());
#line 138 "logo.yacc"
						CurrentSemanticValue = ValueStack[ValueStack.Depth-1] + "();\n";			
#line 139 "logo.yacc"
					}
        break;
      case 21: // logo_command -> FUNCTION_NAME, block_expr
#line 141 "logo.yacc"
{ 
#line 142 "logo.yacc"
						error_checker.AddFuncCall(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1], yyLineCounter());
#line 143 "logo.yacc"
						CurrentSemanticValue = ValueStack[ValueStack.Depth-2] + "(" + ValueStack[ValueStack.Depth-1] + ");\n";	
#line 144 "logo.yacc"
					}
        break;
      case 22: // logo_command -> LABEL, QVARNAME
#line 147 "logo.yacc"
{	CurrentSemanticValue = "_turtle.DrawText(\""+ValueStack[ValueStack.Depth-1]+"\");\n";	}
        break;
      case 23: // logo_command -> SETLABELHEIGHT, expr
#line 150 "logo.yacc"
{ CurrentSemanticValue = "_turtle.SetFontSize("+ValueStack[ValueStack.Depth-1]+");\n";	}
        break;
      case 24: // logo_command -> PU
#line 153 "logo.yacc"
{  CurrentSemanticValue = "_turtle.PenUp();\n"; }
        break;
      case 25: // logo_command -> PD
#line 156 "logo.yacc"
{  CurrentSemanticValue = "_turtle.PenDown();\n"; }
        break;
      case 26: // logo_command -> FD, expr
#line 159 "logo.yacc"
{ CurrentSemanticValue = "_turtle.Forward("+ValueStack[ValueStack.Depth-1]+");\n"; }
        break;
      case 27: // logo_command -> BK, expr
#line 162 "logo.yacc"
{ CurrentSemanticValue = "_turtle.Backward("+ValueStack[ValueStack.Depth-1]+");\n"; }
        break;
      case 28: // logo_command -> RT, expr
#line 165 "logo.yacc"
{ CurrentSemanticValue = "_turtle.Right("+ValueStack[ValueStack.Depth-1]+");\n"; }
        break;
      case 29: // logo_command -> LT, expr
#line 168 "logo.yacc"
{ CurrentSemanticValue = "_turtle.Left("+ValueStack[ValueStack.Depth-1]+");\n"; }
        break;
      case 30: // logo_command -> CS
#line 171 "logo.yacc"
{ CurrentSemanticValue = "_turtle.Reset();\n"; }
        break;
      case 31: // logo_command -> PE
#line 174 "logo.yacc"
{ CurrentSemanticValue = "_turtle.PenErase();\n"; }
        break;
      case 32: // logo_command -> HOME
#line 177 "logo.yacc"
{ CurrentSemanticValue = "_turtle.Home();\n"; }
        break;
      case 33: // logo_command -> SETPC, block_expr
#line 180 "logo.yacc"
{ CurrentSemanticValue = "_turtle.SetPenColor("+ValueStack[ValueStack.Depth-2]+");\n"; }
        break;
      case 34: // logo_command -> SETSC, block_expr
#line 183 "logo.yacc"
{ CurrentSemanticValue = "_turtle.SetPenColor("+ValueStack[ValueStack.Depth-2]+");\n"; }
        break;
      case 35: // logo_command -> SPS, block_expr
#line 186 "logo.yacc"
{ CurrentSemanticValue = "_turtle.SetPenSize("+ValueStack[ValueStack.Depth-2]+");\n"; }
        break;
      case 36: // logo_command -> STOP
#line 189 "logo.yacc"
{ CurrentSemanticValue = "return;\n"; }
        break;
      case 37: // logo_command -> HT
#line 192 "logo.yacc"
{ CurrentSemanticValue = "_turtle.Hide();\n"; }
        break;
      case 38: // logo_command -> ST
#line 195 "logo.yacc"
{ CurrentSemanticValue = "_turtle.Show();\n"; }
        break;
      case 39: // Anon@5 -> /* empty */
#line 199 "logo.yacc"
{ repeatVarCnt++; CurrentSemanticValue = "_i"+repeatVarCnt.ToString(); }
        break;
      case 40: // logo_command -> REPEAT, Anon@5, expr, logo_bcommand
#line 200 "logo.yacc"
{ 
#line 201 "logo.yacc"
						CurrentSemanticValue = "for(int "+ValueStack[ValueStack.Depth-3]+" = 0; "+ValueStack[ValueStack.Depth-3]+" < " + ValueStack[ValueStack.Depth-2] +" ; "+ValueStack[ValueStack.Depth-3]+"++)\n" + ValueStack[ValueStack.Depth-1]; 
#line 202 "logo.yacc"
						repeatVarCnt--;
#line 203 "logo.yacc"
					}
        break;
      case 41: // logo_command -> IF, log_expr, logo_bcommand
#line 206 "logo.yacc"
{ CurrentSemanticValue = "if ("+ValueStack[ValueStack.Depth-2]+")\n" + ValueStack[ValueStack.Depth-1]; }
        break;
      case 42: // logo_command -> IF, log_expr, logo_bcommand, ELSE, logo_bcommand
#line 207 "logo.yacc"
{ CurrentSemanticValue = "if ("+ValueStack[ValueStack.Depth-4]+")\n" + ValueStack[ValueStack.Depth-3] + "else\n" + ValueStack[ValueStack.Depth-1]; }
        break;
      case 43: // logo_command -> WHILE, log_expr, logo_bcommand
#line 210 "logo.yacc"
{ CurrentSemanticValue = "while("+ValueStack[ValueStack.Depth-3]+")\n{\n" + ValueStack[ValueStack.Depth-1] + "\n}\n"; }
        break;
      case 44: // expr -> OP_OPEN, expr, OP_CLOSE
#line 219 "logo.yacc"
{
#line 220 "logo.yacc"
                    CurrentSemanticValue = "(" + ValueStack[ValueStack.Depth-2] + ")";
#line 221 "logo.yacc"
                }
        break;
      case 45: // expr -> expr, OP_STAR, expr
#line 223 "logo.yacc"
{
#line 224 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] +"*"+ ValueStack[ValueStack.Depth-1];
#line 225 "logo.yacc"
                }
        break;
      case 46: // expr -> expr, OP_DIVIDE, expr
#line 227 "logo.yacc"
{
#line 228 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] +"/"+ ValueStack[ValueStack.Depth-1];
#line 229 "logo.yacc"
                }
        break;
      case 47: // expr -> expr, OP_PLUS, expr
#line 231 "logo.yacc"
{
#line 232 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] +"+"+ ValueStack[ValueStack.Depth-1];
#line 233 "logo.yacc"
                }
        break;
      case 48: // expr -> expr, OP_MINUS, expr
#line 235 "logo.yacc"
{
#line 236 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] +"-"+ ValueStack[ValueStack.Depth-1];
#line 237 "logo.yacc"
                }
        break;
      case 49: // expr -> OP_MINUS, expr
#line 239 "logo.yacc"
{
#line 240 "logo.yacc"
                    CurrentSemanticValue = "-" + ValueStack[ValueStack.Depth-1];
#line 241 "logo.yacc"
                }
        break;
      case 50: // expr -> VARNAME
#line 243 "logo.yacc"
{
#line 244 "logo.yacc"
                    //$$ = $1;
                    CurrentSemanticValue = "_lvars[\""+ValueStack[ValueStack.Depth-1]+"\"]";
#line 245 "logo.yacc"
                    error_checker.AddVarUsage(ValueStack[ValueStack.Depth-1], yyLineCounter());
#line 246 "logo.yacc"
                }
        break;
      case 51: // expr -> NUMBER
#line 249 "logo.yacc"
{
#line 250 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-1];
#line 251 "logo.yacc"
                }
        break;
      case 52: // mexpr -> mexpr, expr
#line 256 "logo.yacc"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2] + "," + ValueStack[ValueStack.Depth-1]; }
        break;
      case 53: // mexpr -> expr
#line 257 "logo.yacc"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 54: // block_expr -> BLOCK_OPEN, mexpr, BLOCK_CLOSE
#line 261 "logo.yacc"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 55: // block_expr -> mexpr
#line 262 "logo.yacc"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 56: // log_expr -> OP_OPEN, log_expr, OP_CLOSE
#line 267 "logo.yacc"
{
#line 268 "logo.yacc"
                    CurrentSemanticValue = "(" + ValueStack[ValueStack.Depth-2] + ")";
#line 269 "logo.yacc"
                }
        break;
      case 57: // log_expr -> expr, GT, expr
#line 271 "logo.yacc"
{
#line 272 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] +">"+ ValueStack[ValueStack.Depth-1];
#line 273 "logo.yacc"
				}
        break;
      case 58: // log_expr -> expr, GE, expr
#line 275 "logo.yacc"
{
#line 276 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] +">="+ ValueStack[ValueStack.Depth-1];
#line 277 "logo.yacc"
				}
        break;
      case 59: // log_expr -> expr, LT, expr
#line 279 "logo.yacc"
{
#line 280 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] +"<"+ ValueStack[ValueStack.Depth-1];
#line 281 "logo.yacc"
				}
        break;
      case 60: // log_expr -> expr, LE, expr
#line 283 "logo.yacc"
{
#line 284 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] +"<="+ ValueStack[ValueStack.Depth-1];
#line 285 "logo.yacc"
				}
        break;
      case 61: // log_expr -> log_expr, AND, log_expr
#line 287 "logo.yacc"
{
#line 288 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] +" && "+ ValueStack[ValueStack.Depth-1];
#line 289 "logo.yacc"
				}
        break;
      case 62: // log_expr -> log_expr, OR, log_expr
#line 291 "logo.yacc"
{
#line 292 "logo.yacc"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] +" || "+ ValueStack[ValueStack.Depth-1];
#line 293 "logo.yacc"
				}
        break;
      case 63: // log_expr -> NOT, log_expr
#line 295 "logo.yacc"
{
#line 296 "logo.yacc"
                    CurrentSemanticValue = "!"+ ValueStack[ValueStack.Depth-1];
#line 297 "logo.yacc"
				}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 301 "logo.yacc"

#line 302 "logo.yacc"
/* 
#line 303 "logo.yacc"
 * GPPG does not create a default parser constructor
#line 304 "logo.yacc"
 * Most applications will have a parser type with other
#line 305 "logo.yacc"
 * fields such as error handlers etc.  Here is a minimal
#line 306 "logo.yacc"
 * version that just adds the default scanner object.
#line 307 "logo.yacc"
 */
#line 308 "logo.yacc"

#line 309 "logo.yacc"

#line 310 "logo.yacc"
public int repeatVarCnt = 0;
#line 311 "logo.yacc"
public static string output_code = "";
#line 312 "logo.yacc"
public static string list_of_errors = "";
#line 313 "logo.yacc"
public static ErrorChecker error_checker = null;
#line 314 "logo.yacc"

#line 315 "logo.yacc"
private Lexer parser;
#line 316 "logo.yacc"

#line 317 "logo.yacc"
Parser(Lexer s) : base(s) 
#line 318 "logo.yacc"
{ 
#line 319 "logo.yacc"
   parser = s;
#line 320 "logo.yacc"
}
#line 321 "logo.yacc"

#line 322 "logo.yacc"
public long yyLineCounter()
#line 323 "logo.yacc"
{
#line 324 "logo.yacc"
     return parser.yyLineCounter();
#line 325 "logo.yacc"
}
#line 326 "logo.yacc"

#line 327 "logo.yacc"
public string ds()
#line 328 "logo.yacc"
{
#line 329 "logo.yacc"
     return "_debug_step(" + yyLineCounter().ToString() + ");";
#line 330 "logo.yacc"
}
#line 331 "logo.yacc"

#line 332 "logo.yacc"
public static string ToCs(string lgo)
#line 333 "logo.yacc"
{
#line 334 "logo.yacc"
    output_code = "TurtleRuntime.LogoVariables<double> _gvars = new TurtleRuntime.LogoVariables<double>(null);\n\n";
#line 335 "logo.yacc"
    error_checker = new ErrorChecker();
#line 336 "logo.yacc"
    list_of_errors = "";
#line 337 "logo.yacc"
    Parser parser = new Parser(new Lexer(GenerateStreamFromString(lgo)));
#line 338 "logo.yacc"
    parser.Parse();
#line 339 "logo.yacc"
    return output_code;
#line 340 "logo.yacc"
}
#line 341 "logo.yacc"

#line 342 "logo.yacc"
public static string GetErrorList()
#line 343 "logo.yacc"
{
#line 344 "logo.yacc"
	return list_of_errors;
#line 345 "logo.yacc"
}
#line 346 "logo.yacc"

#line 347 "logo.yacc"
private static System.IO.Stream GenerateStreamFromString(string s)
#line 348 "logo.yacc"
{
#line 349 "logo.yacc"
    System.IO.MemoryStream stream = new System.IO.MemoryStream();
#line 350 "logo.yacc"
    System.IO.StreamWriter writer = new System.IO.StreamWriter(stream);
#line 351 "logo.yacc"
    writer.Write(s);
#line 352 "logo.yacc"
    writer.Flush();
#line 353 "logo.yacc"
    stream.Position = 0;
#line 354 "logo.yacc"
    return stream;
#line 355 "logo.yacc"
}
#line 356 "logo.yacc"

#line 357 "logo.yacc"

#line 358 "logo.yacc"

#line 359 "logo.yacc"
/*
#line 360 "logo.yacc"
static void Main(string[] args)
#line 361 "logo.yacc"
{    
#line 362 "logo.yacc"
    System.IO.FileStream reader;
#line 363 "logo.yacc"
    if (args.Length > 0)
#line 364 "logo.yacc"
    {
#line 365 "logo.yacc"
        reader = new System.IO.FileStream(args[0], System.IO.FileMode.Open);
#line 366 "logo.yacc"

#line 367 "logo.yacc"
        Parser parser = new Parser(new Lexer(reader));
#line 368 "logo.yacc"
        parser.Parse();
#line 369 "logo.yacc"
    }
#line 370 "logo.yacc"
    else
#line 371 "logo.yacc"
    {
#line 372 "logo.yacc"
        string code = "TO main  PD END TO main2 :pero :gjuro  PU   REPEAT 4 [ PD PU ]  PD END";
#line 373 "logo.yacc"

#line 374 "logo.yacc"
        Parser parser = new Parser(new Lexer(GenerateStreamFromString(code)));
#line 375 "logo.yacc"
        parser.Parse();
#line 376 "logo.yacc"
    }
#line 377 "logo.yacc"
    System.Console.WriteLine(output_code);
#line 378 "logo.yacc"
}
#line 379 "logo.yacc"

#line 380 "logo.yacc"
*/
#line 381 "logo.yacc"

#line 382 "logo.yacc"
class Lexer: QUT.Gppg.AbstractScanner<String, LexLocation>
#line 383 "logo.yacc"
{
#line 384 "logo.yacc"
     private Scanner scnr;
#line 385 "logo.yacc"

#line 386 "logo.yacc"
     public Lexer(System.IO.Stream reader)
#line 387 "logo.yacc"
     {
#line 388 "logo.yacc"
         scnr = new Scanner(reader);
#line 389 "logo.yacc"
     }
#line 390 "logo.yacc"

#line 391 "logo.yacc"
     public override int yylex()
#line 392 "logo.yacc"
     {
#line 393 "logo.yacc"
         int token = scnr.yylex(); 
#line 394 "logo.yacc"
         yylval = scnr.yylval;
#line 395 "logo.yacc"

#line 396 "logo.yacc"
         if(token == (int)Tokens.EOF)	// Lex EOF ? 
#line 397 "logo.yacc"
            token = (int)Token.EOF;     // convert to to YACC EOF.. 
#line 398 "logo.yacc"

#line 399 "logo.yacc"
         // Console.Error.WriteLine("Token --> "+token);
#line 400 "logo.yacc"
         return token;
#line 401 "logo.yacc"
     }
#line 402 "logo.yacc"

#line 403 "logo.yacc"
     public long yyLineCounter()
#line 404 "logo.yacc"
     {
#line 405 "logo.yacc"
         return scnr.yyLineCounter;
#line 406 "logo.yacc"
     }
#line 407 "logo.yacc"

#line 408 "logo.yacc"
     public override void yyerror(string format, params object[] args)
#line 409 "logo.yacc"
     {
#line 410 "logo.yacc"
         //list_of_errors += String.Format("Line: " + scnr.yyLineCounter + " " + format, args);
#line 411 "logo.yacc"
         list_of_errors += String.Format("Line " + scnr.yyLineCounter + ": Syntax error" );
#line 412 "logo.yacc"
     }
#line 413 "logo.yacc"
}
#line 414 "logo.yacc"

#line 415 "logo.yacc"

}
}
